# Generated by Django 4.1.3 on 2022-12-01 00:10

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ReadingPassage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=10000)),
                ('question_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('SSAT', 'SSAT')], max_length=10)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TestPrepUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserTestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('finish_timestamp', models.DateTimeField(blank=True, null=True)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_prep_backend.test')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_test_attempts', to='test_prep_backend.testprepuser')),
            ],
        ),
        migrations.CreateModel(
            name='UserResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(choices=[('math_1', 'math_1'), ('math_2', 'math_2'), ('verbal', 'verbal'), ('reading', 'reading')], max_length=15)),
                ('start_timestamp', models.DateTimeField(auto_now_add=True)),
                ('finish_timestamp', models.DateTimeField()),
                ('score', models.IntegerField()),
                ('responses', models.JSONField()),
                ('user_test_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_prep_backend.usertestattempt')),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('section', models.CharField(choices=[('math_1', 'math_1'), ('math_2', 'math_2'), ('verbal', 'verbal'), ('reading', 'reading')], max_length=10)),
                ('prompt', models.CharField(max_length=10000)),
                ('answers', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), size=None)),
                ('correct_answer_value', models.IntegerField()),
                ('topics', models.JSONField()),
                ('difficulty', models.CharField(max_length=10)),
                ('explanations', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), size=None)),
                ('reading_passage', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='test_prep_backend.readingpassage')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_prep_backend.test')),
            ],
        ),
    ]
